// client/src/portal/standard-back-office-portal/left-panel.js

class LeftPanelComponent extends HTMLElement {
  constructor() {
    super();
    const shadow = this.attachShadow({ mode: 'open' });

    const template = document.createElement('template');
    template.innerHTML = `
      <style>/* … your existing styles … */</style>
      <aside class="portal-left-panel">
        <nav id="menu">
          <ul>
            <li>
              <div class="menu-item">
                <i class="fas fa-home icon"></i>
                <span class="text">Home</span>
              </div>
            </li>
            <li id="dashboard-menu">
              <div class="menu-item">
                <i class="fas fa-dashboard icon"></i>
                <span class="text">Dashboard</span>
              </div>
            </li>
            <li>
              <div class="menu-item">
                <i class="fas fa-fire icon"></i>
                <span class="text">Issues</span>
              </div>
            </li>
            <li id="new-case-menu">
              <div class="menu-item">
                <i class="fas fa-folder-plus icon"></i>
                <span class="text">Create New Case</span>
              </div>
              <ul class="submenu" id="case-type-submenu">
                <li id="create-case-type-btn">
                  <i class="fas fa-folder-plus icon"></i>
                  <span class="text">New Case Type</span>
                </li>
              </ul>
            </li>
          </ul>
        </nav>
      </aside>
    `;
    shadow.appendChild(template.content.cloneNode(true));

    this.fetchCaseTypes();
    shadow.getElementById('dashboard-menu')
          .addEventListener('click', () => this.showDashboard());
    shadow.getElementById('create-case-type-btn')
          .addEventListener('click', () => this.createCaseType());
  }

  async createCaseType() {
    try {
      const res = await fetch('/api/case-type', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      });
      if (!res.ok) throw new Error(res.statusText);

      const types = await this.fetchCaseTypes();
      this.populateSubMenu(types);
    } catch (err) {
      console.error('Could not create case type:', err);
      alert('Failed to create new case type');
    }
  }

  async fetchCaseTypes() {
    try {
      const res = await fetch('/api/case-types');
      const types = await res.json();
      console.log('Fetched case types:', types);
      this.populateSubMenu(types);
      return types;
    } catch (err) {
      console.error('Error fetching case types:', err);
      return [];
    }
  }

  populateSubMenu(caseTypes) {
    const submenu = this.shadowRoot.getElementById('case-type-submenu');
    submenu.querySelectorAll('li.dynamic').forEach(li => li.remove());
    console.log('\n\nPopulating submenu with case types:', caseTypes);
    caseTypes.forEach(type => {
      const li = document.createElement('li');
      li.classList.add('dynamic');
      li.textContent = type.label;
      li.addEventListener('click', () => this.handleCaseTypeClick(type));
      submenu.appendChild(li);
    });
  }

  handleCaseTypeClick(caseType) {
    console.log(`\nCase type selected: ${caseType.id}`),
    this.dispatchEvent(new CustomEvent('case-type-selected', {
      
      detail: { caseTypeId: caseType.id },
      bubbles: true,
      composed: true,
    }));
  }

  showDashboard() {
    this.dispatchEvent(new CustomEvent('show-dashboard', {
      bubbles: true,
      composed: true,
    }));
  }
}

customElements.define('left-panel-component', LeftPanelComponent);
