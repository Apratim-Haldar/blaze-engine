class LeftPanelComponent extends HTMLElement {
  constructor() {
    super();
    const shadow = this.attachShadow({ mode: "open" });

    const template = document.createElement("template");
    template.innerHTML = `
      <style>
        :host {
          display: block;
          height: 100%;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          background-color: #ffffff;
          border-right: 1px solid #e5e7eb;
          width: 240px;
        }
        
        .portal-left-panel {
          background-color: #ffffff;
          display: flex;
          flex-direction: column;
          height: 100%;
          padding: 0;
        }
        
        .logo {
          padding: 1rem 1.5rem;
          display: flex;
          align-items: center;
          gap: 0.75rem;
          border-bottom: 1px solid #f3f4f6;
          font-weight: 600;
          font-size: 1.1rem;
          color: #111827;
        }
        
        .logo-img {
          max-height: 32px;
          width: auto;
          object-fit: contain;
        }
        
        .menu {
          padding-top: 1rem;
        }
        
        .menu ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        
        .menu li {
          padding: 0.75rem 1.5rem;
          cursor: pointer;
          color: #6b7280;
          font-weight: 500;
          font-size: 0.95rem;
          display: flex;
          align-items: center;
          gap: 0.75rem;
          transition: all 0.2s ease;
          margin: 0 0.75rem;
          border-radius: 6px;
          position: relative;
        }
        
        .menu li.active {
          background-color: #eff6ff;
          color: #2563eb;
          font-weight: 600;
        }
        
        .menu li:hover:not(.active) {
          background-color: #f9fafb;
          color: #374151;
        }
        
        .icon {
          width: 18px;
          height: 18px;
          opacity: 0.8;
        }
        
        .menu li.active .icon {
          opacity: 1;
        }
        
        .submenu {
          list-style: none;
          padding-left: 2rem;
          margin-top: 0.5rem;
          display: none;
        }
        
        .submenu li {
          padding: 0.5rem 1rem;
          margin: 0.25rem 0;
          font-size: 0.9rem;
        }
        
        .submenu li:hover {
          background-color: #f0f4ff;
        }
        
        .submenu-icon {
          width: 16px;
          height: 16px;
        }
        
        .has-submenu::after {
          content: 'â–¼';
          font-size: 0.7rem;
          margin-left: auto;
          transition: transform 0.3s ease;
        }
        
        .has-submenu.open::after {
          transform: rotate(180deg);
        }
        
        .has-submenu.open + .submenu {
          display: block;
        }
      </style>

      <aside class="portal-left-panel">
        <div class="logo">
          <span>Logo</span>
        </div>
        <nav class="menu">
          <ul>
            <li id="home-menu" class="active">
              <img src="node_modules/@blaze-case-ai/blaze-engine/client/src/component/icons/icons8-home.svg"
                   class="icon" alt="Home" /> Home
            </li>
            <li id="dashboard-menu">
              <img src="node_modules/@blaze-case-ai/blaze-engine/client/src/component/icons/chart-upward-svgrepo-com.svg"
                   class="icon" alt="Dashboard" /> Dashboard
            </li>
            <li id="create-case-menu" class="has-submenu">
              <img src="node_modules/@blaze-case-ai/blaze-engine/client/src/component/icons/plus-circle-svgrepo-com.svg"
                   class="icon" alt="Create Case" /> Create Case
            </li>
            <ul class="submenu" id="case-type-submenu">
              <li id="create-case-type-btn">
                <img src="node_modules/@blaze-case-ai/blaze-engine/client/src/component/icons/plus-svgrepo-com.svg"
                     class="submenu-icon" alt="New Type" /> New Case Type
              </li>
            </ul>
          </ul>
        </nav>
      </aside>
    `;
    
    shadow.appendChild(template.content.cloneNode(true));

    // Event bindings
    shadow.getElementById("home-menu").addEventListener("click", () => this._activateMenu("home-menu"));
    shadow.getElementById("dashboard-menu").addEventListener("click", () => {
      this._activateMenu("dashboard-menu");
      window.dispatchEvent(new CustomEvent("show-dashboard", { bubbles: true, composed: true }));
    });
    
    const createCaseMenu = shadow.getElementById("create-case-menu");
    createCaseMenu.addEventListener("click", () => {
      createCaseMenu.classList.toggle("open");
    });
    
    shadow.getElementById("create-case-type-btn").addEventListener("click", (e) => {
      e.stopPropagation();
      this.createCaseType();
    });
  }

  async createCaseType() {
    try {
      const token = localStorage.getItem('blazeToken');
      const res = await fetch('/api/case-type', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({})
      });
      
      if (!res.ok) throw new Error(res.statusText);
      this.fetchCaseTypes();
    } catch (err) {
      console.error('Could not create case type:', err);
      alert('Failed to create new case type');
    }
  }

  async fetchCaseTypes() {
    try {
      const token = localStorage.getItem('blazeToken');
      const res = await fetch('/api/case-types', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!res.ok) throw new Error('Failed to fetch case types');
      
      const types = await res.json();
      console.log('Fetched case types:', types);
      this.populateSubMenu(types);
    } catch (err) {
      console.error('Error fetching case types:', err);
    }
  }

  populateSubMenu(caseTypes) {
    const submenu = this.shadowRoot.getElementById('case-type-submenu');
    submenu.querySelectorAll('li.dynamic').forEach(li => li.remove());
    
    caseTypes.forEach(type => {
      const li = document.createElement('li');
      li.classList.add('dynamic');
      li.innerHTML = `
        <img src="node_modules/@blaze-case-ai/blaze-engine/client/src/component/icons/folder-svgrepo-com.svg"
             class="submenu-icon" alt="Case Type" /> 
        <span>${type.label}</span>
      `;
      
      li.addEventListener('click', (e) => {
        e.stopPropagation();
        this.handleCaseTypeClick(type);
      });
      
      submenu.appendChild(li);
    });
  }

  handleCaseTypeClick(caseType) {
    this.dispatchEvent(new CustomEvent('case-type-selected', {
      detail: { caseTypeId: caseType.id },
      bubbles: true,
      composed: true,
    }));
  }

  _activateMenu(id) {
    this.shadowRoot.querySelectorAll(".menu li").forEach((li) => li.classList.remove("active"));
    const el = this.shadowRoot.getElementById(id);
    el.classList.add("active");
  }

  connectedCallback() {
    this.fetchCaseTypes();
  }
}

if (!customElements.get("left-panel-component")) {
  customElements.define("left-panel-component", LeftPanelComponent);
}