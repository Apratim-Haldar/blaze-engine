export class InteractiveChart extends HTMLElement {
  constructor() {
    super();
    const shadow = this.attachShadow({ mode: "open" });

    // Create a div for Google Chart
    const chartDiv = document.createElement("div");
    chartDiv.id = "chart";
    chartDiv.style.width = "100%";
    chartDiv.style.height = "500px";
    chartDiv.style.minHeight = "400px";
    shadow.appendChild(chartDiv);

    this.drawChart = this.drawChart.bind(this);

    // Load Google Charts
    this.loadGoogleCharts().then(() => {
      this.fetchDataAndRenderChart();
    });
  }

  // Method to load Google Charts library
  loadGoogleCharts() {
    return new Promise((resolve) => {
      // Check if Google Charts is already loaded
      if (window.google && window.google.charts) {
        window.google.charts.load("current", { packages: ["corechart"] });
        window.google.charts.setOnLoadCallback(resolve);
        return;
      }

      // Load Google Charts script
      const script = document.createElement("script");
      script.src = "https://www.gstatic.com/charts/loader.js";
      script.onload = () => {
        window.google.charts.load("current", { packages: ["corechart"] });
        window.google.charts.setOnLoadCallback(resolve);
      };
      document.head.appendChild(script);
    });
  }

  // Function to fetch data from the API and render the chart
  async fetchDataAndRenderChart() {
    try {
      const token = localStorage.getItem('blazeToken');
      // Fetch the case data from your API
      const response = await fetch("/api/my-cases", {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!response.ok) throw new Error('Failed to fetch cases');
      
      const casesData = await response.json();

      // Get case type labels
      const caseTypesRes = await fetch("/api/case-types", {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const caseTypes = await caseTypesRes.json();
      const caseTypeMap = new Map(caseTypes.map(type => [type.id, type.label]));

      // Group data by caseTypeId
      const caseTypeCounts = this.groupByCaseType(casesData);

      // Prepare the data for Google Charts
      const chartData = [["Case Type", "Count", { role: "tooltip", type: "string", p: { html: true } }]];
      
      for (const [caseTypeId, count] of Object.entries(caseTypeCounts)) {
        const label = caseTypeMap.get(caseTypeId) || caseTypeId;
        chartData.push([label, count, `<b>${label}</b><br>Cases: ${count}`]);
      }

      // Draw the chart with the processed data
      this.drawChart(chartData);
    } catch (error) {
      console.error("Error fetching case data:", error);
      this.shadowRoot.getElementById("chart").innerHTML = `
        <div style="padding: 2rem; text-align: center; color: #6b7280;">
          <h3>Failed to load chart data</h3>
          <p>${error.message || 'Please try again later'}</p>
        </div>
      `;
    }
  }

  // Helper function to group data by caseTypeId
  groupByCaseType(cases) {
    const caseTypeCounts = {};

    // Iterate over each case and count the occurrences of each caseTypeId
    cases.forEach((caseItem) => {
      const caseTypeId = caseItem.caseTypeId;
      if (caseTypeCounts[caseTypeId]) {
        caseTypeCounts[caseTypeId]++;
      } else {
        caseTypeCounts[caseTypeId] = 1;
      }
    });

    return caseTypeCounts;
  }

  // Draw the chart using Google Charts
  drawChart(chartData) {
    // Convert the data into Google Charts' format
    const data = window.google.visualization.arrayToDataTable(chartData);

    const options = {
      title: "Cases by Case Type",
      chartArea: { width: "60%", height: "70%" },
      is3D: true,
      hAxis: {
        title: "Total Cases",
        minValue: 0,
      },
      vAxis: {
        title: "Case Type",
      },
      tooltip: { isHtml: true },
      animation: {
        startup: true,
        duration: 1000,
        easing: "out",
      },
      legend: { position: "none" },
      bar: { groupWidth: "75%" }
    };

    // Draw the bar chart
    const chart = new window.google.visualization.BarChart(this.shadowRoot.querySelector("#chart"));

    // Handle click event on bars
    window.google.visualization.events.addListener(chart, "select", () => {
      const selectedItem = chart.getSelection()[0];
      if (selectedItem) {
        const caseType = data.getValue(selectedItem.row, 0);
        this.dispatchEvent(new CustomEvent('case-type-selected', {
          detail: { caseTypeId: caseType },
          bubbles: true,
          composed: true
        }));
      }
    });

    chart.draw(data, options);
  }
}

customElements.define("interactive-chart", InteractiveChart);