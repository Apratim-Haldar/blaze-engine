import { CaseViewStandard } from '../../template/case-view-standard/index.js';
import { MyCases } from '../../component/my-cases.js';
import { InteractiveChart } from './dashboard.js';

class CenterPanelComponent extends HTMLElement {
    constructor() {
        super();
        const shadow = this.attachShadow({ mode: 'open' });

        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                :host {
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                    width: 100%;
                }
                .portal-center-panel {
                    flex: 1;
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                    background-color: #ffffff;
                }
                .tabs {
                    display: flex;
                    border-bottom: 1px solid #ccc;
                    background-color: #f1f1f1;
                    flex-shrink: 0;
                }
                .tab {
                    padding: 10px;
                    margin-right: 5px;
                    background-color: #f1f1f1;
                    border: 1px solid #ccc;
                    cursor: pointer;
                    flex-shrink: 0;
                    border-radius: 8px 8px 0 0;
                }
                .tab.active {
                    background-color: #fff;
                    border-bottom: none;
                }
                .tab-content-container {
                    flex: 1;
                    overflow: auto;
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                }
                .tab-content {
                    padding: 10px;
                    flex: 1;
                    height: 100%;
                    border: 1px solid #ccc;
                }
                .tab-close {
                    margin-left: 10px;
                    cursor: pointer;
                    color: red;
                }
            </style>
            <div class="portal-center-panel">
                <div class="tabs" id="tabs-container">
                    <div class="tab active" id="home-tab" data-tab-id="home">Home <span class="tab-close" data-tab-id="home">x</span></div>
                </div>
                <div class="tab-content-container" id="tab-content-container">
                    <div class="tab-content" data-tab-id="home">
                        <my-cases></my-cases>
                    </div>
                </div>
            </div>
        `;
        shadow.appendChild(template.content.cloneNode(true));
 
        this.tabIdCounter = 1;
    }

    connectedCallback() {

        window.addEventListener('case-type-selected', (e) => {
            // Use caseTypeId as the caseId parameter instead of e.detail.caseId
            this.openNewTab(e.detail.caseTypeId, e.detail.caseTypeId, `Loading case type data ...`);
        });

        window.addEventListener('case-selected', (e) => {
        //console.log(e);
            this.openNewTab('', e.detail.caseId, `Loading case type data ...`);
        });

        window.addEventListener('show-dashboard', () => {
            this.openDashboardTab();
        });
    }

    openNewTab(caseType, caseId, content) {
        const existingTab = this.shadowRoot.querySelector(`.tab[data-tab-id="${caseId}"]`);

        if (existingTab) {
            this.switchTab(caseType);
        } else {
            this.createTab(caseType, caseId, content);
        }
    }

    createTab(caseType, caseId, content) {
        const tabId = caseId;

        // Create new tab
        const tab = document.createElement('div');
        tab.classList.add('tab');
        tab.setAttribute('data-tab-id', tabId);
        tab.innerHTML = `${caseId} <span class="tab-close" data-tab-id="${tabId}">x</span>`;
        tab.addEventListener('click', () => this.switchTab(tabId));
        this.shadowRoot.getElementById('tabs-container').appendChild(tab);

        // Create new tab content using `case-view-standard`
        const tabContent = document.createElement('div');
        tabContent.classList.add('tab-content');
        tabContent.setAttribute('data-tab-id', tabId);

        // Create and insert the `case-view-standard` component
        const caseView = document.createElement('case-view-standard');
        caseView.setAttribute('case-title', caseType); // Pass case type as title
        caseView.setAttribute('case-id', tabId);
        tabContent.appendChild(caseView);

        this.shadowRoot.getElementById('tab-content-container').appendChild(tabContent);

        // Switch to the newly created tab
        this.switchTab(tabId);
    }


    switchTab(tabId) {
        // Deactivate all tabs and contents
        this.shadowRoot.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        this.shadowRoot.querySelectorAll('.tab-content-container > .tab-content').forEach(content => {
            content.style.display = 'none';
        });

        // Activate the selected tab
        const selectedTab = this.shadowRoot.querySelector(`.tab[data-tab-id="${tabId}"]`);
        const selectedContent = this.shadowRoot.querySelector(`.tab-content[data-tab-id="${tabId}"]`);
        selectedTab.classList.add('active');
        selectedContent.style.display = 'block';

        // Add close functionality for the tab
        selectedTab.querySelector('.tab-close').addEventListener('click', (e) => {
            e.stopPropagation();  // Prevent switching tab when closing
            this.closeTab(tabId);
        });
    }

    closeTab(tabId) {
        const tab = this.shadowRoot.querySelector(`.tab[data-tab-id="${tabId}"]`);
        const content = this.shadowRoot.querySelector(`.tab-content[data-tab-id="${tabId}"]`);
        
        // Remove the tab and its content
        tab.remove();
        content.remove();
        // Switch to home tab if the closed tab was active
        if (tab.classList.contains('active')) {
            this.switchTab('home');
        }
    }

    openDashboardTab() {
        const dashboardTabId = 'dashboard';

        const existingTab = this.shadowRoot.querySelector(`.tab[data-tab-id="${dashboardTabId}"]`);

        if (existingTab) {
            this.switchTab(dashboardTabId);
        } 
        else {
            // Create new dashboard tab
            const tab = document.createElement('div');
            tab.classList.add('tab');
            tab.setAttribute('data-tab-id', dashboardTabId);
            tab.innerHTML = `Dashboard <span class="tab-close" data-tab-id="${dashboardTabId}">x</span>`;
            tab.addEventListener('click', () => this.switchTab(dashboardTabId));
            this.shadowRoot.getElementById('tabs-container').appendChild(tab);

            // Create new tab content with the chart
            const tabContent = document.createElement('div');
            tabContent.classList.add('tab-content');
            tabContent.setAttribute('data-tab-id', dashboardTabId);

            // Assuming you have a chart Web Component like interactive-chart
            const chartComponent = document.createElement('interactive-chart'); // or whatever chart component you are using
            tabContent.appendChild(chartComponent);

            this.shadowRoot.getElementById('tab-content-container').appendChild(tabContent);

            // Switch to the newly created dashboard tab
            this.switchTab(dashboardTabId);
        }
    }
}

customElements.define('center-panel-component', CenterPanelComponent);