class AuthScreen extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.render();
  }

  render() {
    this.shadowRoot.innerHTML = `
      <style>
        .auth-container {
          max-width: 400px;
          margin: 100px auto;
          padding: 2rem;
          border: 1px solid #ccc;
          border-radius: 8px;
          font-family: sans-serif;
        }
        input, button {
          display: block;
          margin-top: 1rem;
          width: 100%;
          padding: 0.5rem;
        }
      </style>
      <div class="auth-container">
        <h2>Login or Signup</h2>
        <input type="email" id="email" placeholder="Email" />
        <input type="password" id="password" placeholder="Password" />
        <button id="login-btn">Login</button>
        <button id="signup-btn">Signup</button>
        <p id="error" style="color:red"></p>
      </div>
    `;
    this.shadowRoot.getElementById('login-btn').onclick = () => this.authenticate('login');
    this.shadowRoot.getElementById('signup-btn').onclick = () => this.authenticate('signup');
  }

  async authenticate(mode) {
    const email = this.shadowRoot.getElementById('email').value;
    const password = this.shadowRoot.getElementById('password').value;
    try {
      const res = await fetch(`/auth/${mode}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      const data = await res.json();
      if (res.ok) {
        localStorage.setItem('blazeToken', data.token);
        location.reload();
      } else {
        this.shadowRoot.getElementById('error').innerText = data.message;
      }
    } catch (e) {
      this.shadowRoot.getElementById('error').innerText = 'Error connecting to server';
    }
  }
}
customElements.define('auth-screen', AuthScreen);