import { CaseHeader } from './case-header.js';
import { CaseStages } from './case-stages.js';
import { CaseActionArea } from './case-action-area.js';
import { CaseWidgetPanel } from './case-widget-panel.js';

export class CaseViewStandard extends HTMLElement {
    constructor() {
        super();
        const shadow = this.attachShadow({ mode: 'open' });

        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                .case-container {
                    display: flex;
                    flex-direction: column;
                    padding: 20px;
                }

                .main-body {
                    display: flex;
                    justify-content: space-between;
                    transition: all 0.3s ease-in-out;
                }

                .main-body.full-width {
                    justify-content: flex-start;
                }

                case-header {
                    margin-bottom: 16px;
                    width: 100%;
                }

                case-action-area {
                    width: 60%;
                    border-radius: 8px;
                    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
                    padding: 10px;
                    margin-right: 20px;
                    transition: width 0.3s ease-in-out;
                }

                .main-body.full-width case-action-area {
                    width: 97%;
                    margin-right: 0;
                }

                .main-body.full-width .case-widget-panel-wrapper {
                    width: 10px;
                }

                .main-body.full-width case-widget-panel {
                    visibility:hidden;
                }

                .case-widget-panel-wrapper {
                    width: 40%;
                    border-radius: 8px;
                    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
                    padding: 10px;
                    transition: transform 0.3s ease-in-out;
                }

                .drawer-icon {
                    position: relative;
                    top: -20px;
                    right:-10px;
                    float:right;
                    background-color: #007bff;
                    color: white;
                    border: none;
                    border-radius: 50%;
                    cursor: pointer;
                    padding: 8px;
                }

            </style>

            <div class="case-container">
                <!-- Child components are injected here after data is fetched -->
            </div>
        `;

        shadow.appendChild(template.content.cloneNode(true));
    }

    async connectedCallback() {
        const caseId = this.getAttribute('case-id');  // Assuming case ID is provided as an attribute
        //alert(caseId);
        if (caseId) {
            // Fetch case data
            const caseData = await this.loadCaseData(caseId);

            if (caseData) {
                // Pass case data to child components
                this.renderChildComponents(caseData);
            }
        } else {
            console.error('No case-id attribute found.');
        }
    }

    async loadCaseData(caseId) {
        try {
            // Fetch the case data using the caseId
            const caseResponse = await fetch(`/api/case-type/${caseId}`);
            if (!caseResponse.ok) throw new Error('Failed to fetch case data');

            // Parse the JSON response from the first fetch
            const caseData = await caseResponse.json();
            const caseType = caseData.caseType.id;

            // Fetch the case type data using the caseType ID
            const caseTypeResponse = await fetch(`/case-type/${caseType}`);
            if (!caseTypeResponse.ok) throw new Error('Failed to fetch case type info');

            // Parse the JSON response from the second fetch
            const caseTypeData = await caseTypeResponse.json();

            // Assign stages from case type data to case data
            caseData.stages = caseTypeData.stages;

            return caseData;
        } catch (error) {
            console.error('Error fetching case data:', error);
            return null;
        }
    }


    renderChildComponents(caseData) {
        // Create and append child components only after case data is fetched

        // Pass data to <case-header>
        const caseHeader = document.createElement('case-header');
        caseHeader.caseData = caseData;
        this.shadowRoot.querySelector('.case-container').appendChild(caseHeader);

        // Pass data to <case-stages>
        const caseStages = document.createElement('case-stages');
        caseStages.caseStages = caseData.stages;
        this.shadowRoot.querySelector('.case-container').appendChild(caseStages);

        // Create the main-body div with <case-action-area> and <case-widget-panel>
        const mainBody = document.createElement('div');
        mainBody.classList.add('main-body');

        // Add case-action-area
        const caseActionArea = document.createElement('case-action-area');
        caseActionArea.caseData = caseData;
        mainBody.appendChild(caseActionArea);

        // Add case-widget-panel
        const caseWidgetPanelWrapper = document.createElement('div');
        caseWidgetPanelWrapper.classList.add('case-widget-panel-wrapper');

        const drawerButton = document.createElement('button');
        drawerButton.classList.add('drawer-icon');
        drawerButton.textContent = 'â‡†';
        drawerButton.addEventListener('click', () => {
            mainBody.classList.toggle('full-width');
        });
        caseWidgetPanelWrapper.appendChild(drawerButton);

        const caseWidgetPanel = document.createElement('case-widget-panel');
        caseWidgetPanel.caseData = caseData;
        caseWidgetPanelWrapper.appendChild(caseWidgetPanel);

        mainBody.appendChild(caseWidgetPanelWrapper);
        this.shadowRoot.querySelector('.case-container').appendChild(mainBody);
    }
}

customElements.define('case-view-standard', CaseViewStandard);
