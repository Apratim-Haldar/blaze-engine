const path = require('path');
const fs = require('fs');

// Go up 5 levels from this file to reach the project root, then into client/src/component
const COMPONENTS_DIR = path.join(__dirname, '../../../../../client/src/component');

// Get all components (list all files)
exports.getComponents = (req, res) => {
    fs.readdir(COMPONENTS_DIR, (err, files) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(files.filter(f => f.endsWith('.js')));
    });
};

exports.ping = (req, res) => {
    res.json({ message: 'pong' });
};
// Get a single component by name
exports.getComponent = (req, res) => {
    const { componentName } = req.params;
    const filePath = path.join(COMPONENTS_DIR, `${componentName}.js`);
    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) return res.status(404).json({ error: 'Component not found' });
        res.type('application/javascript').send(data);
    });
};

// Create a new component
exports.createComponent = (req, res) => {
    const { componentName, content } = req.body;
    if (!componentName || !content) return res.status(400).json({ error: 'componentName and content required' });
    const filePath = path.join(COMPONENTS_DIR, `${componentName}.js`);
    fs.writeFile(filePath, content, { flag: 'wx' }, err => {
        if (err) return res.status(400).json({ error: 'Component already exists or invalid' });
        res.json({ message: 'Component created' });
    });
};

// Update an existing component
exports.updateComponent = (req, res) => {
    const { componentName } = req.params;
    const { content } = req.body;
    if (!content) return res.status(400).json({ error: 'content required' });
    const filePath = path.join(COMPONENTS_DIR, `${componentName}.js`);
    fs.writeFile(filePath, content, err => {
        if (err) return res.status(500).json({ error: err.message });
        res.json({ message: 'Component updated' });
    });
};

// Delete a component
exports.deleteComponent = (req, res) => {
    const { componentName } = req.params;
    const filePath = path.join(COMPONENTS_DIR, `${componentName}.js`);
    fs.unlink(filePath, err => {
        if (err) return res.status(404).json({ error: 'Component not found' });
        res.json({ message: 'Component deleted' });
    });
};