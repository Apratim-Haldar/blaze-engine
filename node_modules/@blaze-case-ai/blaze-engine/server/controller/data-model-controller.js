const dataModelService = require('../service/data-model-service');

// GET /api/data-models
async function getDataModels(req, res) {
  try {
    const list = await dataModelService.fetchDataModels();
    res.json(list);
  } catch (err) {
    console.error('Error in getDataModels:', err);
    res.status(500).json({ message: err.message });
  }
}

// GET /api/data-model/:dataModelId
async function getDataModel(req, res) {
  const { dataModelId } = req.params;
  try {
    const model = await dataModelService.fetchDataModel(dataModelId);
    if (!model) return res.status(404).json({ message: `Data model not found: ${dataModelId}` });
    res.json(model);
  } catch (err) {
    console.error(`Error in getDataModel ${dataModelId}:`, err);
    res.status(500).json({ message: err.message });
  }
}

// POST /api/data-model
async function createDataModel(req, res) {
  try {
    const newModel = await dataModelService.createDataModel(req.body);
    res.status(201).json(newModel);
  } catch (err) {
    console.error('Error in createDataModel:', err);
    // If it's a protected model error, return 403 Forbidden
    if (err.message.includes('protected')) {
      return res.status(403).json({ message: err.message });
    }
    res.status(500).json({ message: err.message });
  }
}

// PUT /api/data-model/:dataModelId
async function updateDataModel(req, res) {
  try {
    const updated = await dataModelService.updateDataModel(req.params.dataModelId, req.body);
    res.json(updated);
  } catch (err) {
    console.error(`Error in updateDataModel ${req.params.dataModelId}:`, err);
    // If it's a protected model error, return 403 Forbidden
    if (err.message.includes('protected')) {
      return res.status(403).json({ message: err.message });
    }
    res.status(500).json({ message: err.message });
  }
}

// DELETE /api/data-model/:dataModelId
async function deleteDataModel(req, res) {
  try {
    await dataModelService.deleteDataModel(req.params.dataModelId);
    res.json({ message: 'Data model deleted' });
  } catch (err) {
    console.error(`Error in deleteDataModel ${req.params.dataModelId}:`, err);
    // If it's a protected model error, return 403 Forbidden
    if (err.message.includes('protected')) {
      return res.status(403).json({ message: err.message });
    }
    res.status(500).json({ message: err.message });
  }
}

// DELETE /api/data-model/:dataModelId/attribute/:attributeId
async function deleteDataModelAttribute(req, res) {
  const { dataModelId, attributeId } = req.params;
  
  try {
    const result = await dataModelService.deleteDataModelAttribute(dataModelId, attributeId);
    res.json({ 
      message: `Attribute '${attributeId}' deleted from data model '${dataModelId}'`,
      model: result 
    });
  } catch (err) {
    console.error(`Error deleting attribute ${attributeId} from model ${dataModelId}:`, err);
    // If it's a protected model error, return 403 Forbidden
    if (err.message.includes('protected')) {
      return res.status(403).json({ message: err.message });
    }
    res.status(err.statusCode || 500).json({ message: err.message });
  }
}

// POST /api/data-model/:dataModelId/attribute
async function addDataModelAttribute(req, res) {
  const { dataModelId } = req.params;
  const attributeData = req.body;
  
  try {
    // Validate attribute data
    if (!attributeData || !attributeData.id || !attributeData.type) {
      return res.status(400).json({ 
        message: "Attribute must have at least an id and type"
      });
    }
    
    const result = await dataModelService.addDataModelAttribute(dataModelId, attributeData);
    res.status(201).json({ 
      message: `Attribute '${attributeData.id}' added to data model '${dataModelId}'`,
      model: result 
    });
  } catch (err) {
    console.error(`Error adding attribute to model ${dataModelId}:`, err);
    // If it's a protected model error, return 403 Forbidden
    if (err.message.includes('protected')) {
      return res.status(403).json({ message: err.message });
    }
    // For other specific errors
    if (err.statusCode) {
      return res.status(err.statusCode).json({ message: err.message });
    }
    res.status(500).json({ message: err.message });
  }
}

module.exports = {
  getDataModels,
  getDataModel,
  createDataModel,
  updateDataModel,
  deleteDataModel,
  deleteDataModelAttribute,
  addDataModelAttribute
};